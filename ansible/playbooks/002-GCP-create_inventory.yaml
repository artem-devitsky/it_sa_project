- name: Create instances ("{{ instances }}")
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    gcp_instance_name: "{{ instances }}"
    input: "{{ lookup('file','./instances_result.json') | from_json }}"
  pre_tasks:
    - name: Add external configs
      ansible.builtin.include_vars:
        dir: "./config"
        depth: 1
        ignore_files: "credentials.yaml"
        extensions:
          - 'yaml'
  tasks:
    - name: get info on an instance
      google.cloud.gcp_compute_instance_info:
        zone: "{{ gcp_default_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
      register: result

    - name: Write variable to file
      local_action: copy content="{{ result }}" dest=./instances_result.json mode=0600

    - name: Create interfaces Dictionary
      ansible.builtin.set_fact:
        interfaces: "{{ input }}"

    - name: Create neighbors dictionary (this is now per interface)
      ansible.builtin.set_fact:
        neighbors: "{{ interfaces | json_query('resources[*].networkInterfaces[*].networkIP') | list }}"

    - name: Print out neighbors
      ansible.builtin.debug:
        msg: "{{ neighbors }}"

#  - name: Print out flatten interfaces input
#    debug:
#     msg:  "{{ lookup('ansible.utils.to_paths', interfaces) }}"

#  - name: Display all cluster names
#    ansible.builtin.debug:
#      var: item
#    loop: "{{ interfaces | community.general.json_query('*') }}"

#  - name: Register JSON output as a variable
#    ansible.builtin.shell: cat ./instances_result
#    register: result
#
#  - set_fact: myvar="{{ result.stdout | from_json|ipaddr }}"

#  - name: Set a variable
#    ansible.builtin.set_fact:
#      myvar: "{{ result.stdout | from_json }}"

#  - name: Display all addresses
#    ansible.builtin.debug:
#      msg: "{{ result.stdout | community.general.json_query(instances) }}"
#    vars:
#      instances: "*"

#  - name: Display all server ip
#    ansible.builtin.debug:
#      var: item
#    loop: "{{ result.stdout  | to_json | from_json  | community.general.json_query('resources.*.networkInterfaces.*.networkIP') }}"
